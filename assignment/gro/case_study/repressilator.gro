include gro

alfa := 298.2;
beta := 0.2;
n := 2;
alfa0 := 0.03;

program prog() := {

	m1 := 0;
	m2 := 0;
	m3 := 0;
	p1 := 0;
	p2 := 5;
	p3 := 15;

	con1 := 0;
	con2 := 0;
	con3 := 0;
	con4 := 0;
	con5 := 0;
	con6 := 0;

	//MGEN
	rate(alfa0) : { m1 := m1 + 1; m2 := m2 + 1; m3 := m3 + 1; }

	rate(alfa / (1 + p1^n)) : {m1 := m1 + 1;}
	rate(alfa / (1 + p2^n)) : {m2 := m2 + 1;}
	rate(alfa / (1 + p3^n)) : {m3 := m3 + 1;}

	rate (m1) : { m1 := m1 - 1; }
	rate (m2) : { m2 := m2 - 1; }
	rate (m3) : { m3 := m3 - 1; }

	//PGEN

	rate (beta*m1) : { p1 := p1 + 1; }
	rate (beta*p1) : { p1 := p1 - 1; }
	rate (beta*m2) : { p2 := p2 + 1; }
	rate (beta*p2) : { p2 := p2 - 1; }
	rate (beta*m3) : { p3 := p3 + 1; }
	rate (beta*p3) : { p3 := p3 - 1; }

	//CONSGEN

	k1 := 10;
	k2 := 10;
	k3 := 10;
	kq := 5;
	kd1 := 0.2;
	kd2 := 0.2;
	kd3 := 0.2;
	kd4 := 0.2;
	kd5 := 0.2;
	kd6 := 0.2;

	rate ( (p2 / k2) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : { con1 := con1 + 1; }
	rate ( con1 * kd1) : {con1 := con1 - 1; }

	rate ( (p1 * p2 / (k1 * k2 * kq)) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : {con2 := con2 + 1; }
	rate ( con2 * kd2) : {con2 := con2 - 1; }

	rate ( (p1 / k1 ) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : {con3 := con3 + 1; }
	rate ( con3 * kd3) : {con3 := con3 - 1; }

	rate ( (p1 * p3 / (k1 * k3 * k1) ) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : {con4 := con4 + 1; }
	rate ( con4 * kd4) : {con4 := con4 - 1; }

	rate ( (p3 / k3) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : { con5 := con5 + 1; }
	rate ( con5 * kd5) : { con5 := con5 - 1; }


	rate ( (p3 * p2 / (k3 * k2 * kq) ) /
	(1 + (p3 / k3) + (p2 / k2) + (p1 / k1) + (p1 * p2 * p3 / (k1 * k2 * k3 * kq)) + (p1 * p2 / (k1 * k2 * kq)) + (p1 * p3 / (k1 * k3 * kq)) + (p2 * p3 / (k2 * k3 * kq)))
	) : { con6 := con6 + 1; }
	rate ( con6 * kd6) : {con6 := con6 - 1; }

};

ecoli([], program prog());